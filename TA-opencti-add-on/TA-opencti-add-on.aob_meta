{"alert_action_builder": {"modular_alerts": [{"description": "Create an Incident in OpenCTI", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABFFJREFUWEftV2tTE1cYfvbSJJJQLuN0CJKsoCAlBATpWPrJioKXYbDWeun/6D/o537S6dRqZ/qlnU7HVu3Yy5RLrSK2igoJUXJBiVA7U6tA6YZsCHR2Tw6eDZvsQmHGD5xPu+fsvvuc533e8z7LYUt4ES/R4DYAmWRjgyEzueZkqMItYuLJ/LL3S4sFPJtKm8XV1reUiZj8c3mMXLHVdwwBVZSJeHy7EsP3FTTuH1/6+NzYdthtHLiKiA5QOl6N+GQKla2PdPOLE9V4Pp1GqW9saT7YI8G3wwZPy0NMGIDNydDXn7hx7LAL90JJNLXHtYCCwGF+fLt2XVQbw8zsgnYdvrYVl36axQcfPtXuVRb/DlZp17wngsXMwRLokVC/w4ZfBhJ4+70JQ5bzivrbc+U4csCJ4AMF/n0vmFJ3ro6SuhimZggoOtyvCfjjDgHDMhnsleCrseHqzQT2HDMGkzNl7AcoUwODc3ir67G2VLCJw78RwpTgjWAhg2mTg4McJfO2yihSKULNjUsetO5yoPe6jLaTk4bM0ElLZX/hrBtHD7lwJ5DEroMkfbwApMcJU5v9YxrI+O+Vy5gZ/NGL5no7fv5VRvv7+cFYYogip6AC9xU0ZITO84AqaHawaRrplVBXY0NffwJ7T+ROk+79lbSOrz5243inC/dGkmjqIEypVadWnzpEKYJ05kQY7pbgr80vYKPcWUoZ++LF8+Xo6nAiOKrA3/ZC6OwzVgW8JoDUIFTov92dw5udROh03PzOg91NDvT2y2g7Ya6ZbFArZihbU7eHknjjMEnfre+9aGmwo/uajP2nVg5mRaI2ovfCp24cPejSTnSBh3YC91yXsc+ktI1i0blVM0QDfHmmDCe7CrXb1aZp1VVmtDNa2urayKiC+hxCz8fKmgG6dcWLlkY7+vplPJtewLuHXGA1ZRXEmgCi1cRqhmrKqPqsgluVhmjXNqomeqIPhxQ0thufU2sqanoC5xPwF6fLcOpIIYZCSezMWJd1YSjUJ+H1ar2FYFuHoyqKpEI6/OXPytHZ7kQorMC31zpTllM2+IMXzX67zlyJApDKdHzKAGtHvjnnxjsH9C7BjClLgG5c9qC12aHr2qIIpB6RTl/qi4HnOTwNEGMmSBEsZJos1RTrp/6XhgLdEuprbTo/4yzgMRvepsVlLaoKKh0nnd9ZHYWcIOmjoIZCCnaaCD0vQ7SastsBtbCsr6a7LnqVx1SIgGW9ERV64IGCBsYOZ7OVExA9gVkPLAocUhmTX1gTw6xMvOuVz8vx0dkp9PTL2n2hk8fMKAHFeiQq9HwnuiEgVwGPf8LbcHUggT3M38FfgSpsLhF0O6euMZ1ehChFdRtWmRyfnMfW3Q+X5i+ed6Orw4Xiuhims34QNFZzOUYVFGWA/UqxmpKsQLZXOCgZQ88+W1LE4/m0/q9EXVfTagQmLyCz8lyvdUtlv14fN4q7AciM7ZeOof8A2nD7hBnmHjAAAAAASUVORK5CYII=", "label": "OpenCTI - Create Incident", "short_name": "opencti_create_incident", "parameters": [{"format_type": "text", "required": false, "name": "name", "label": "Name", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "description", "label": "Description", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "type", "label": "Type", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "severity", "label": "Severity", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "labels", "label": "Labels", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "tlp", "label": "TLP", "default_value": "tlp_amber", "help_string": "", "type": "", "value": "tlp_amber"}, {"format_type": "dropdownlist", "required": false, "name": "observable_extraction", "label": "Observable Extraction", "default_value": "disable", "help_string": "", "possible_values": {"Enable": "enable", "Disable": "disable"}, "type": "", "value": "disable"}], "code": "\n# encoding = utf-8\n# Always put this line at the beginning of this file\nimport ta_opencti_add_on_declare\n\nimport os\nimport sys\n\nfrom alert_actions_base import ModularAlertBase\nimport modalert_opencti_create_incident_helper\n\nclass AlertActionWorkercreate_incident(ModularAlertBase):\n\n    def __init__(self, ta_name, alert_name):\n        super(AlertActionWorkercreate_incident, self).__init__(ta_name, alert_name)\n\n    def validate_params(self):\n\n        if not self.get_param(\"name\"):\n            self.log_error('name is a mandatory parameter, but its value is None.')\n            return False\n\n        return True\n\n    def process_event(self, *args, **kwargs):\n        status = 0\n        try:\n            if not self.validate_params():\n                return 3\n            status = modalert_opencti_create_incident_helper.process_event(self, *args, **kwargs)\n        except (AttributeError, TypeError) as ae:\n            self.log_error(\"Error: {}. Please double check spelling and also verify that a compatible version of Splunk_SA_CIM is installed.\".format(str(ae)))\n            return 4\n        except Exception as e:\n            msg = \"Unexpected error: {}.\"\n            if e:\n                self.log_error(msg.format(str(e)))\n            else:\n                import traceback\n                self.log_error(msg.format(traceback.format_exc()))\n            return 5\n        return status\n\nif __name__ == \"__main__\":\n    exitcode = AlertActionWorkercreate_incident(\"TA-opencti-add-on\", \"opencti_create_incident\").run(sys.argv)\n    sys.exit(exitcode)\n", "uuid": "09e93533b0c74dc39919b7c1d6ec902c"}, {"description": "Create an Incident Response case in OpenCTI", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAAAXNSR0IArs4c6QAADwBJREFUeF7tXGmTVNUZfnrvnpmeYViGfV9kGWDAYRFExaVcAEEQ3EWt+CFJJVX54of8hnxLPiRVxi24gWwKChgrsgUYBgaGHQEFBESEYdbbe6ee99wzfbvpZrrpHpBU3yqqsLz39jnPfc77Pud9n4MNA0/GUbwyImArAnRzdhQB6mL1FAEqApRfgC0yqMigIoPyQ6DIoPzwyykG2e2Aw2GTX4xG44jFutAQNsBuV/fHYnHECyRJcx1HrvdbZ5UTQC6XDaU+NeF2I45w+OYzJpget7o/GIoLqIW4OI4ScxwdWYwj13HnDJD+An16OnDPSBfKSu1oao7hytUoLl6OoLUtmUo9yu0YOsiFXpUOeDw2NLfEcOJ0CFebomnx0feX++2IRuK43hLDj5ciaEl5r364Ty8Hxo92o6LcjrZ2NY5zFyJobk0eh7/MjoF9neD9PSrUvSdOh3HlWjSrFcDfy4pB+gtMqfbghYV+jBjqwpWrMTQcDmD9lnaZvPWaPN6Dl5f4wftdThsajwbxzqctaDgcTAsQ71++tFwm3d4Rw4GjQaze2Iaj3yW/Vz88tdqDN16owMSxbnQYHEcQH69rxaHjyfePHenGwsdLMXWiF70q7ThzNoyP17fK/dmsgJwBmlXrw++XV8gPcsk0Hg/isw1t2NMQSGISJ/zKEj8euq9EwDz7Yxjvr2rB1t2GfOnrzVHE4uiMSXNm+PDnP/TEvRM9woZtewy8/VEz9h1SgNrMWEamDRnoxIMzfQLo4AFOnDwTwre7jCSANHNmTPVi6fwyTB7ngddrk/f97Z3r2LHXKCxAeonVmBOfPc2HAX2d6AjEcPhECNvrDHxhYRInMmywSwBavtQvf//hfBjb9xj4aF0rDhwJSvyKmivivnu9+NOblRg7yo3vz4Wxa5+BdZvbcfyUYoSOZTUTyOAy3D/dJ+/kve+ubMG3uzrUEmtRL9TMIfATxrglJFxtimHnXgNvf9yM+sZgYZeYpraatA8EaNpkD/r2cSIQjKHxWEiWRF1DABcuR2St22w21Ix349Wl5fLF+ez5C2F8uLYV23YbOH02jKvXo5IJCcziJ8sE9HMXwjh2KoT6g0H89HNEwOHyGDXMjQdm+mSJDxrgFMC37jLw3qoWHDwaFDYKc/o5MWOKYs6k8R74PDb80hSVj7KjLoDN37bj1A/hrHNFVjFIv620xC4Bb8oED+Y/yrXtQb8qJwwjhiMnQ9hRZ2A9v/zpkCwLHXwJKpfE8MEuAWB7XQAfrmlBw5EgQuE4Sn12DOzvlMkwKzE4NzVHEYkAPq9NYtnzC/24f5oPgwc6hTlcslxaBIpBXZgzSsWcOdMTzLl2XcVKMrL+YAA/XYnKB8z2ygkg/VJOdO7sEsyu9eLeSR707e2UiTYeC2LlF23Yvd/ApZ8TA+HSeP25cmHf0IEunLsYlpjBCZ48E74huxFc/und0yGTfmimD8sW+AVExjM+997KFmEFLy6h/lUOzJzqw7Kny8BQ4CVzrkWFXTv2BrDpP7kxR8/1lgAik6p6OcCJP/VIKZhVuDzajZgMmjHpy2/a8d33iso9e9gxcpiKSS8v9osEIJO4RBhDmFWsIlLHPDLntaXleGCGTwLy9+fD+GB1K7bu6pCMRKnBa/Rwl4yDzOGYKvx2AYfvZZbd15g7c/IC6IaYVOvDtBqPLL/2DsWkdZvaUHcgiEuXIwKc02FDzQQ3Xl5cLrGEIKVmN+oYCm9qlmGDXAIM5cKQgSrIMwv+azWZExJlLszp68T0yR4sekJlq7IyO5qumzFnr4HNWztwOoeYk7r0bolBqTGJX23+I6USK/pVOSSOMLsxJn3xNZlkxiRz4jpNa5DIuE/WteHIySCcTpvoGy6pWbVeWZJkjo45BJUxh4wbM9KNBY+WSlarvkdlq2tNUYltn29pk7R+OceYU1CArEyaO8uH2bU+1E72oKq3A4EAmRTCmq8sOkmyG2QZLH/WjEmDXPjxYkQE3NGTITidkMkune/HgH4qWzHmECAdc3S2ml7jxeKnyjB5vBslPjuuXoti/+EgdtYZ2LKtQzJlvldeDEqX3eYxJkl2c8AIxHHU1EmditsGVHbqJJXdlARQWwsCyBgyqL8TZ26SrRY9rphD9V2qmXM4KNmKMUeY05F9tsoEZEEASsukSR5U9XEiFIrj0LEgVm1MVtyaSa8tUzqJy42ygBeXULpsReYwGcyc6sUyU+fobHXgsMpWm7feWra6LQBpncQ0+9TDiklcJoFATPZJori/TuzdmN1GDDGz2xI/uEXhxdQsW5NdhsQfna3uMfdWzFY65lylzjmkdE4+2eq2ANTJpEEuPEjFXevD9Cmm4g7E0Hj8RsXtsKvs9sqSclG+GqAPGHNMhczgqxXys/MYczwiIPNRyNnGpoIusc6Y5DMVd7VS3NyE9tWK+7sQduxJr7hTl5jOVt2hkO8oQFbF/fDsEsya5lUgmTFJK+49DQYuXY6iNYP094vOcWDGFB+ee1oxp1AK+VcBUFrF3c8pNR/ZAtQZ2PhNu2w30l1jRrjArMiYQ3BYUBOFfCQoe77uiDndooO6+hqdVQCL4qaYJJPWfpVQ3JpJijlOTK/x4JknFXPKSuy4VkCF3NWYC7LVyPZHOrNbGsXN7EYmbfg3maTqP2NGuCV2UedQVRMwlkaYytcXSCFnO/ZuCdKZfpxMSlLcvZSY1IqbdSCW+MeNdivmjHOD4LKWzY0nK4FbuLcqgEL+VQJkrSfNYz2Je7c+CiTWk1hMJ0CsFIxjJVCDIzGnDfsazb1VARTyrxKgGxU360le9O3tQCgMRGNxAYiFftaQWZ9mQGapNN9debaA3JEgnfqjCcXtxpNzleKmEGSW4kVGddZzNrehvgC78rsKID1YBmDWmFlIGzNS9dF4sfjOghp38bqgdqsTzPe52xqkUwdL5rz5YoWUYskgbkZ5sWbMki0rh/9YoboQd+q6IwBpnSO78gUJheywMw4BkSgQZt+NNe4NrHEHpDKZSXF3J3h3BCCtc6iQJ413o7xMFbsIABuSLH5RKLJr2nhUVQGsOqk7AbmjQVrvrVQl0C99M61zWC288FNEAOKejX03pnsG7IOsTH7ZiroDZFLmvVt3AHdbGaT3VlTIk8Z5FHN0DXlzG46dCksxfvRwN6w6iX10Lreu9m53LUC6Vz6txotFT5Qm7a3S6ZxOxT3Nh9pJqlui927rNrULk9K5Su5agHSvnMzhNkIU8k32VkmK29ItkRq37uCmcZXcdQBZa8jSKzddFr9QIWext9JMYvunVivuEJSrJKXG3R3g8J3dGoOsNeQJZt+K2YrgrMtib2VV3E9QcVd7pNsRCKq+G7Pb593MpG4ByOqySKohm8UuBlu9t7KaHDKVXIcOckqXla4Saqd+VlfJl6pbwgyY6nQrBKu6BSDWkNm3oj+HfSvpeJoui7Wb2lFv9q1YWUxXtKcjTbeYuYFlgV5cJdVePP2YWePuo/xJx04qJln9RIUARr+joABphXwfFbJZQ6aJk92Hg/TnWFwWZE5lRea2z4rVdH90SPOQ4PIaPsSFR0xXydS0rpLCK+6CAkSFvOAxxZxJrARS55jMYQ1Z+3PIHAJEn5E2WKVrHNKsoG0u7MVLjbu38ifpDm7/KlNxs++2R/XddGWyEEwqCEDan0Nn15J5SiFzu5CoISecXRJzKuxipqLvhwAxW3H33mK6VCv8DjFKsS9vNUo10SgVhzw7d7YP9ExSJ2kvABX36o2tEpOs/qR8gCoIQFZ/jnQfykxwmK0s/hzNHDEvmNY8Mue8aahiZmLBrHqsctPSaqdb0O9/pswLwiRfwp9k9QLQesNuSao/6Y4BZFXIC6mQ6c+hh9rsPuw0e+WsIauY48Cwwcql+uqz5dKPJ0uY1Wju1ABNHOvB84v8mDPde4OP6AfaX5qV/YXPW2vcyf6kduw9mL/izotBqQqZMSLhz2nH/kPK2cVdOX0/ZA4dZkzZGhyrPZgGKjKIBnGappSPSDnSyCSaP1esUQaqSJTZLeGZJJO0P8kwVI2bRf58ddItAZTkQ56n3KS645nOn9OzhwOjxILnw0u04NGnyIrhbgPvfppYOtalQJcsJ/z6Mr/0+QkYQVqxRmU3usZ0dktV3IxJoRBwqACK+5YASvUh65IFwUnXfWDWec1q4jTtwMxS9DFmOqLAEuzoEQrYFxf5MWSAC2d1KdYElqCmU9w0fAaDikmMScyiqScCsolNOQGU0Ydsbh9I6XQK2WoD5gS37wmYS0UZyr1eu3Q26C5jJmOwNYI8HRQHj0EQYHobGZPIpEyWvHSKW04EHDP3bvuVjzsXxZ0TQJ0Kmc4u08GeSSGnM5JzWX24plXMmHSpUgbwSALT9qNzSlBWahNH2plzEVz6OSIOMTpeuURHDlUx6aVn/BhsMXVabTKZFLcRUD5u6iTt486GPVlvVrVvmfugP77RQ/ZEEnPSKGS+lEGWcYbMoT/aehSBANH3E44kzpuxeP+b5ytkI8qJMLjv2h+QEz+8CBJ7ZQzyBIhCVB9F+OcnzWK0On8xcdrHqrjp464yfdz/rTfw13euY3dDQBz+2Zxfy4pBeoCsIb/1u0oJnjdzsFdb2jk8PsXBa8fYWR5maYnK4PiH4BPwt35bKRYZeoJ21hvSzWAnVb6iaSzvUe7AUB5mMZ37dK8RUAK0aoMygeqYpBV354mAPk5Zan/5exO21RnqrEj601lJ5MoJIH5BOsFGDHGKUmXZYlOasw8EiEcHGDuYig+fCEq2SnccyupVpI6KxeMiCN9f1SqiL93FD/TGc+WyzFva4vLezzYmANLPcOk+PNsnH1SZ1yNYsVaNo6AA6S+oYwErguxAMIakO/tAlyq3Cr16OGQnTn2T7siBnkil6VUkQ3gqkZ5E7YdOBxCzG+vb7MSyFMssKAfwUg7UaX8SD8NUlDtk9095wPsLusT0IPVS439bY0imgOdwAG6XOpLJsxyZKK3Pg/G+bM628r0e873BLJYK72c2lHFncX+SHsvlHzfRTOILdAy5WTZQE1d3dPXFeK9+b1cZJpf36hiW7ThSfzurGNTVgP+f/38RoC6+bhGgIkD5BYAig4oMKjIoPwSKDMoPv2IM6gK//wE26lZ/ePIBxgAAAABJRU5ErkJggg==", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABFFJREFUWEftV2tTE1cYfvbSJJJQLuN0CJKsoCAlBATpWPrJioKXYbDWeun/6D/o537S6dRqZ/qlnU7HVu3Yy5RLrSK2igoJUXJBiVA7U6tA6YZsCHR2Tw6eDZvsQmHGD5xPu+fsvvuc533e8z7LYUt4ES/R4DYAmWRjgyEzueZkqMItYuLJ/LL3S4sFPJtKm8XV1reUiZj8c3mMXLHVdwwBVZSJeHy7EsP3FTTuH1/6+NzYdthtHLiKiA5QOl6N+GQKla2PdPOLE9V4Pp1GqW9saT7YI8G3wwZPy0NMGIDNydDXn7hx7LAL90JJNLXHtYCCwGF+fLt2XVQbw8zsgnYdvrYVl36axQcfPtXuVRb/DlZp17wngsXMwRLokVC/w4ZfBhJ4+70JQ5bzivrbc+U4csCJ4AMF/n0vmFJ3ro6SuhimZggoOtyvCfjjDgHDMhnsleCrseHqzQT2HDMGkzNl7AcoUwODc3ir67G2VLCJw78RwpTgjWAhg2mTg4McJfO2yihSKULNjUsetO5yoPe6jLaTk4bM0ElLZX/hrBtHD7lwJ5DEroMkfbwApMcJU5v9YxrI+O+Vy5gZ/NGL5no7fv5VRvv7+cFYYogip6AC9xU0ZITO84AqaHawaRrplVBXY0NffwJ7T+ROk+79lbSOrz5243inC/dGkmjqIEypVadWnzpEKYJ05kQY7pbgr80vYKPcWUoZ++LF8+Xo6nAiOKrA3/ZC6OwzVgW8JoDUIFTov92dw5udROh03PzOg91NDvT2y2g7Ya6ZbFArZihbU7eHknjjMEnfre+9aGmwo/uajP2nVg5mRaI2ovfCp24cPejSTnSBh3YC91yXsc+ktI1i0blVM0QDfHmmDCe7CrXb1aZp1VVmtDNa2urayKiC+hxCz8fKmgG6dcWLlkY7+vplPJtewLuHXGA1ZRXEmgCi1cRqhmrKqPqsgluVhmjXNqomeqIPhxQ0thufU2sqanoC5xPwF6fLcOpIIYZCSezMWJd1YSjUJ+H1ar2FYFuHoyqKpEI6/OXPytHZ7kQorMC31zpTllM2+IMXzX67zlyJApDKdHzKAGtHvjnnxjsH9C7BjClLgG5c9qC12aHr2qIIpB6RTl/qi4HnOTwNEGMmSBEsZJos1RTrp/6XhgLdEuprbTo/4yzgMRvepsVlLaoKKh0nnd9ZHYWcIOmjoIZCCnaaCD0vQ7SastsBtbCsr6a7LnqVx1SIgGW9ERV64IGCBsYOZ7OVExA9gVkPLAocUhmTX1gTw6xMvOuVz8vx0dkp9PTL2n2hk8fMKAHFeiQq9HwnuiEgVwGPf8LbcHUggT3M38FfgSpsLhF0O6euMZ1ehChFdRtWmRyfnMfW3Q+X5i+ed6Orw4Xiuhims34QNFZzOUYVFGWA/UqxmpKsQLZXOCgZQ88+W1LE4/m0/q9EXVfTagQmLyCz8lyvdUtlv14fN4q7AciM7ZeOof8A2nD7hBnmHjAAAAAASUVORK5CYII=", "label": "OpenCTI - Create Incident Response", "short_name": "opencti_create_incident_response", "parameters": [{"format_type": "text", "required": false, "name": "name", "label": "Name", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "description", "label": "Description", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "severity", "label": "Severity", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "priority", "label": "Priority", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "type", "label": "Type", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "case_template", "label": "Case Template", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "labels", "label": "Labels", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "tlp", "label": "TLP", "default_value": "tlp_amber", "help_string": "", "type": "", "value": "tlp_amber"}, {"format_type": "dropdownlist", "required": false, "name": "observable_extraction", "label": "Observable Extraction", "default_value": "disable", "help_string": "", "possible_values": {"Enable": "enable", "Disable": "disable"}, "type": "", "value": "disable"}], "code": "\n# encoding = utf-8\n# Always put this line at the beginning of this file\nimport ta_opencti_add_on_declare\n\nimport os\nimport sys\n\nfrom alert_actions_base import ModularAlertBase\nimport modalert_opencti_create_incident_response_helper\n\nclass AlertActionWorkercreate_incident_response(ModularAlertBase):\n\n    def __init__(self, ta_name, alert_name):\n        super(AlertActionWorkercreate_incident_response, self).__init__(ta_name, alert_name)\n\n    def validate_params(self):\n\n        if not self.get_param(\"name\"):\n            self.log_error('name is a mandatory parameter, but its value is None.')\n            return False\n        return True\n\n    def process_event(self, *args, **kwargs):\n        status = 0\n        try:\n            if not self.validate_params():\n                return 3\n            status = modalert_opencti_create_incident_response_helper.process_event(self, *args, **kwargs)\n        except (AttributeError, TypeError) as ae:\n            self.log_error(\"Error: {}. Please double check spelling and also verify that a compatible version of Splunk_SA_CIM is installed.\".format(str(ae)))\n            return 4\n        except Exception as e:\n            msg = \"Unexpected error: {}.\"\n            if e:\n                self.log_error(msg.format(str(e)))\n            else:\n                import traceback\n                self.log_error(msg.format(traceback.format_exc()))\n            return 5\n        return status\n\nif __name__ == \"__main__\":\n    exitcode = AlertActionWorkercreate_incident_response(\"TA-opencti-add-on\", \"opencti_create_incident_response\").run(sys.argv)\n    sys.exit(exitcode)\n", "uuid": "db9d4188916444978858c9f0fcbc2ee7"}]}, "basic_builder": {"appname": "TA-opencti-add-on", "friendly_name": "OpenCTI Add-on", "version": "2.0", "author": "", "description": "", "theme": "#001BDA", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABUxJREFUWEftV2tQlGUYPXthd1U2+iPuspuNk1ZEIgraVTOkwdCmJC5x1zC5ZImXqZn+iuZPERDtZiC3XWApQ7AimqkZmxQCsWKgpBnbHaBMjKWGXXaX5nnf3WWXWXY/iGn6wfPz22/f73znOc95zieCZmAK/6MSLQIK0I1FhgLJdVaGYtbJ0fODBTbb9BFymQgP3CdDb5/F69wVyyUYveOAddJ7PuiM7u8tsNunb5dKRYiKkKHzmvcZrjt8Aoq4X4beL+5FU4sZKQXD7tMM76oRt2UptqWacLVngl0PU0nRodOg72crduUOue99YqMCHXotKhvGsO+N39zX9WfUeHFHMKK332QvPLN8ApKIgdLiUBRkh0D/iRlprw7D4QBiIuVo12khkQDx6SZc7pxAUJAIhvfUuN5nxVsnbrHzY59cgtYqDW6P2rE12YSBQSvEYqCuXIWU55SobBxD7uERL+b8MuT68cyJUORlhqC5bRzJeUOwO4CoCDm+NmgxNQXEZ5jwTdcExCLA4exW3OaluFgZhj9G7XgqyYiffpkEvaD+rBqJzwYzxnYfHJlVSn6njB5UfjwU+VkhqDaYkX1gmAF5ZL0Cl2o07EGxqUa3HjZvWoLP6jQMzLYUE/oHrRCJgPMlKmQkKtkZOUWc7dkq4NjTgWXFy1GYczfqPuagSOjrHpKjQ69BkFSE7ZkmBC8T48K5MNy+Y8fWJCMGBidBAq4qWYG055V4v/5PpiV/YAhkQECuNyk/ForCnBA0XuTto1r/MIHSMqbkchF+v2VnjBEYqoazaiTtCMY53RhePjx7mzzZEgyIHlpWHIr87BDoLnChU/s2RsnRXqfFX3873AImVutPcwFXNXIwnqPvz4sEA/Ip9Pwh9iASOgFiApYANNpCBOwL2JwB0dufdgq9ptmMrNc5U6z/JOBTKmTsUqK6yYzsounf/LEyr5Z5/ok8pfQoF3rtR2bkHODmWVmiQvoLSnxQT2Y4wmxirjVnhjwfUH6Mg2pqHYcIQGJCMAOTe0SYgBekZTOZoukjn6I632TGnkPDggW84ICkEkBXoWbMUBlax5FaMASbxzL9z1pGAq4u5ZohZmjKiCnSVOZrcxezC/i8NESjXXmSTxMT8JsjbNJcQqfpoxUh1Hv+1ZQRM43vcJ/xJWCX0A1t40jaN+S2BKGtmzNDugruwOQzuw8Os9HesFbOdhTlG7KEcqej15OjF07nKSGgBAOSSinP8N1EEWLPId6mRzco8HmdhgGKSzPiao+FGWTF8VDkZfHdR2vGZhP2tSUIED2gpkzFtjbtppwi7jPRkXJ8qdeyLMQykQN4OtmIbmcSrHibWwKlhIz9woQeEBAt1Q9PqpCZqGRb+xVyYLtz0+u0EIl5eiShX6rWYNI2hdgUE679aGEp4NRRnhJqnFkokHv7D2hiHiFIwJRn9h7h2fjxGAXaqjWsZbEpRnx3nWdjCvUdOi3TFaXJK908d3sKnaLLvAOaW8AeSS96rRxfGe5hXxjx6UZc6fEO6o9FK/BpjYaSFrYkGpnQPRcyRZeX/AjdJ0Mk4NoyFZJ3KpmAKc/QW1F0JQFTPZNmwrdOBih7X+6aQFXDGPuNQFGUpdbGUcTttTCNueJwQ4sZ6ftHfArdJ6DIcBk621aitplGe3pRkrB3blvGUmFXL2dmzaogdLauZFkoJuGme7I3RSnQrtOgsWXcKy2S0Pem3YWYhF+ZzmbWrBoKXyNjny+ebksiXb0qCP03eER1VWS4HMZhG/vs8awHV8vQf8PqZY78DH7dVwWcMiFmtpD3LAIKxOYiQ4EY+ge765SToyuqtwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.4.1", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "opencti:stream", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "opencti_stream", "title": "OpenCTI Stream", "description": "This input collects real-time threat intelligence from the OpenCTI streaming API and ingests it into Splunk as events. Data includes indicators, threat actors, malware, attack patterns, and more, formatted as STIX 2.1 objects. Use this input to continuously enrich your Splunk environment with up-to-date threat context from your OpenCTI instance.", "type": "customized", "parameters": [{"name": "stream_id", "label": "Stream ID", "help_string": "OpenCTI Stream Id to consume", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "fc0e47a8-3275-416a-befd-7ccd9ae6c33e"}, {"name": "import_from", "label": "Import From (Days)", "help_string": "The number of days to go back for the initial data collection. The start date is calculated on the basis of the current UTC time.", "required": false, "format_type": "text", "default_value": "30", "placeholder": "", "type": "text", "value": "30"}, {"name": "input_type", "label": "Input Type", "help_string": "Choose where to store the data.\n\t\u2022\tKV Store keeps structured data for lookups.\n\t\u2022\tIndex saves events for searching and alerting.", "required": false, "possible_values": [{"value": "kvstore", "label": "KV Store"}, {"value": "index", "label": "Index"}], "format_type": "dropdownlist", "default_value": "kvstore", "placeholder": "", "type": "dropdownlist", "value": "Index"}], "data_inputs_options": [{"type": "customized_var", "name": "stream_id", "title": "Stream ID", "description": "OpenCTI Stream Id to consume", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "import_from", "title": "Import From (Days)", "description": "The number of days to go back for the initial data collection. The start date is calculated on the basis of the current UTC time.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "30", "placeholder": ""}, {"type": "customized_var", "name": "input_type", "title": "Input Type", "description": "Choose where to store the data.\n\t\u2022\tKV Store keeps structured data for lookups.\n\t\u2022\tIndex saves events for searching and alerting.", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "kvstore", "label": "KV Store"}, {"value": "index", "label": "Index"}], "format_type": "dropdownlist", "default_value": "kvstore", "placeholder": ""}], "code": "# encoding = utf-8\nimport json\nimport sys\nfrom datetime import datetime, timezone, timedelta\n\nimport six\nimport splunklib.client as client\nfrom filigran_sseclient import SSEClient\nfrom stix2patterns.v21.pattern import Pattern\n\nfrom ta_opencti_add_on.constants import VERIFY_SSL, INDICATORS_KVSTORE_NAME\nfrom ta_opencti_add_on.utils import get_proxy_config\n\nSUPPORTED_TYPES = {\n    \"email-addr\": {\"value\": \"email-addr\"},\n    \"email-message\": {\"value\": \"email-message\"},\n    \"ipv4-addr\": {\"value\": \"ipv4-addr\"},\n    \"ipv6-addr\": {\"value\": \"ipv6-addr\"},\n    \"domain-name\": {\"value\": \"domain-name\"},\n    \"hostname\": {\"value\": \"hostname\"},\n    \"url\": {\"value\": \"url\"},\n    \"user-agent\": {\"value\": \"user-agent\"},\n    \"file\": {\n        \"hashes.MD5\": \"md5\",\n        \"hashes.SHA-1\": \"sha1\",\n        \"hashes.SHA-256\": \"sha256\",\n        \"name\": \"filename\",\n    },\n}\n\nMARKING_DEFs = {}\nIDENTITY_DEFs = {}\n\n\ndef date_now_z():\n    return (\n        datetime.utcnow()\n        .replace(microsecond=0, tzinfo=timezone.utc)\n        .isoformat()\n        .replace(\"+00:00\", \"Z\")\n    )\n\n\ndef validate_input(helper, definition):\n    pass\n\n\ndef exist_in_kvstore(kv_store, key_id):\n    try:\n        kv_store.query_by_id(key_id)\n        return True\n    except:\n        return False\n\n\ndef sanitize_key(key):\n    return key.replace(\".\", \":\").replace(\"'\", \"\")\n\n\ndef parse_stix_pattern(stix_pattern):\n    try:\n        parsed_pattern = Pattern(stix_pattern)\n        for observable_type, comparisons in six.iteritems(\n            parsed_pattern.inspect().comparisons\n        ):\n            for data_path, data_operator, data_value in comparisons:\n                if observable_type in SUPPORTED_TYPES:\n                    data_path = \".\".join(data_path)\n                    if (\n                        data_path in SUPPORTED_TYPES[observable_type]\n                        and data_operator == \"=\"\n                    ):\n                        return {\n                            \"type\": SUPPORTED_TYPES[observable_type][data_path],\n                            \"value\": data_value.strip(\"'\"),\n                        }\n    except Exception as e:\n        print(f\"[!] STIX pattern parse error: {e} | pattern = {stix_pattern}\")\n        return None\n\n\ndef enrich_payload(splunk_helper, payload, msg_event):\n    payload[\"stream_id\"] = splunk_helper.get_arg(\"stream_id\")\n    payload[\"input_name\"] = splunk_helper.get_input_stanza_names()\n    payload[\"event\"] = msg_event\n\n    created_by_id = payload.get(\"created_by_ref\")\n    if created_by_id:\n        payload[\"created_by\"] = IDENTITY_DEFs.get(created_by_id)\n\n    payload[\"markings\"] = []\n    for marking_ref_id in payload.get(\"object_marking_refs\", []):\n        marking_value = MARKING_DEFs.get(marking_ref_id)\n        if marking_value:\n            payload[\"markings\"].append(marking_value)\n\n    parsed_stix = parse_stix_pattern(payload[\"pattern\"])\n    if parsed_stix is None:\n        return None\n    payload[\"type\"] = parsed_stix[\"type\"]\n    payload[\"value\"] = parsed_stix[\"value\"]\n\n    if \"extensions\" in payload:\n        for ext in payload[\"extensions\"].values():\n            for attr in [\n                \"id\",\n                \"score\",\n                \"created_at\",\n                \"updated_at\",\n                \"is_inferred\",\n                \"detection\",\n                \"main_observable_type\",\n            ]:\n                if attr in ext:\n                    payload[\"_key\" if attr == \"id\" else attr] = ext[attr]\n        del payload[\"extensions\"]\n\n    if \"external_references\" in payload:\n        del payload[\"external_references\"]\n\n    return payload\n\n\ndef enrich_generic_payload(splunk_helper, payload, msg_event):\n    payload[\"stream_id\"] = splunk_helper.get_arg(\"stream_id\")\n    payload[\"input_name\"] = splunk_helper.get_input_stanza_names()\n    payload[\"event\"] = msg_event\n\n    created_by_id = payload.get(\"created_by_ref\")\n    if created_by_id:\n        payload[\"created_by\"] = IDENTITY_DEFs.get(created_by_id)\n\n    payload[\"markings\"] = []\n    for marking_ref_id in payload.get(\"object_marking_refs\", []):\n        marking_value = MARKING_DEFs.get(marking_ref_id)\n        if marking_value:\n            payload[\"markings\"].append(marking_value)\n\n    if \"extensions\" in payload:\n        for ext in payload[\"extensions\"].values():\n            for attr in [\n                \"id\",\n                \"score\",\n                \"created_at\",\n                \"creator_ids\",\n                \"updated_at\",\n                \"is_inferred\",\n            ]:\n                if attr in ext:\n                    payload[\"_key\" if attr == \"id\" else attr] = ext[attr]\n\n    if \"external_references\" in payload:\n        del payload[\"external_references\"]\n\n    return payload\n\n\ndef collect_events(helper, ew):\n    helper.set_log_level(helper.log_level)\n    helper.log_info(\"OpenCTI data input module start\")\n\n    input_name = helper.get_input_stanza_names()\n    input_type = helper.get_arg(\"input_type\").strip().lower()\n    stream_id = helper.get_arg(\"stream_id\")\n    target_index = helper.get_arg(\"index\")\n\n    helper.log_info(f\"Selected input type: {input_type}\")\n    helper.log_info(f\"Fetching data from OpenCTI stream.id: {stream_id}\")\n\n    proxies = get_proxy_config(helper)\n    opencti_url = helper.get_global_setting(\"opencti_url\")\n    opencti_token = helper.get_global_setting(\"opencti_api_key\")\n    #\n    # Reset Checkpoint\n    #\n    helper.delete_check_point(helper.get_input_stanza_names())\n    helper.log_warning(\"Checkpoint Reset\")\n    #\n    #\n    state = helper.get_check_point(input_name)\n    if state is None:\n        import_from = helper.get_arg(\"import_from\")\n        recover_until = datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n        start_date = datetime.utcnow() - timedelta(days=int(import_from))\n        start_timestamp = int(datetime.timestamp(start_date)) * 1000\n        state = {\n            \"start_from\": str(start_timestamp) + \"-0\",\n            \"recover_until\": recover_until,\n        }\n        helper.log_info(f\"Initialized checkpoint state: {state}\")\n    else:\n        state = json.loads(state)\n\n    live_stream_url = f\"{opencti_url}/stream/{stream_id}\"\n    if \"recover_until\" in state:\n        live_stream_url += f\"?recover={state['recover_until']}\"\n    helper.log_debug(f\"Live stream URL: {live_stream_url}\")\n\n    kvstore = None\n    helper.log_debug(f\"Input Type: {input_type}\")\n    if input_type == \"kvstore\":\n        try:\n            helper.log_debug(\"Initializing KV Store\")\n            session_key = helper.context_meta.get(\"session_key\")\n            if not session_key:\n                raise ValueError(\"session_key not found in context_meta\")\n            service = client.connect(token=session_key, app=\"TA-opencti-add-on\")\n            helper.log_info(\"Connected to Splunk KV Store\")\n            kvstore = service.kvstore[INDICATORS_KVSTORE_NAME].data\n        except Exception as e:\n            helper.log_error(f\"Failed to connect to KV Store: {e}\")\n            return\n\n    try:\n        messages = SSEClient(\n            live_stream_url,\n            state.get(\"start_from\"),\n            headers={\n                \"authorization\": f\"Bearer {opencti_token}\",\n                \"listen-delete\": \"true\",\n                \"no-dependencies\": \"true\",\n                \"with-inferences\": \"true\",\n            },\n            verify=VERIFY_SSL,\n            proxies=proxies,\n        )\n\n        for msg in messages:\n            if msg.event not in [\"create\", \"update\", \"delete\"]:\n                continue\n\n            message_payload = json.loads(msg.data)\n            data = message_payload.get(\"data\", {})\n            entity_type = data.get(\"type\")\n\n            if entity_type == \"identity\":\n                IDENTITY_DEFs[data[\"id\"]] = data.get(\"name\", \"Unknown\")\n            elif entity_type == \"marking-definition\":\n                MARKING_DEFs[data[\"id\"]] = data.get(\"name\", \"Unknown\")\n\n            parsed_stix = None\n            if entity_type == \"indicator\" and data.get(\"pattern_type\") == \"stix\":\n                parsed_stix = enrich_payload(helper, data, msg.event)\n            else:\n                parsed_stix = enrich_generic_payload(helper, data, msg.event)\n\n            if parsed_stix is None:\n                helper.log_error(f\"Could not enrich data for msg {msg.id}\")\n                continue\n\n            key = sanitize_key(data.get(\"id\", parsed_stix.get(\"_key\", msg.id)))\n            helper.log_debug(f\"Key: {key}\")\n            if (\n                input_type == \"kvstore\"\n                and entity_type == \"indicator\"\n                and data.get(\"pattern_type\") == \"stix\"\n            ):\n                try:\n                    if msg.event == \"delete\":\n                        if exist_in_kvstore(kvstore, key):\n                            kvstore.data.delete_by_id(parsed_stix[\"_key\"])\n                            helper.log_info(f\"KV Store: Deleted {key}\")\n                    else:\n                        parsed_stix[\"added_at\"] = datetime.now(timezone.utc).strftime(\n                            \"%Y-%m-%dT%H:%M:%SZ\"\n                        )\n                        kvstore.batch_save(*[parsed_stix])\n                        helper.log_info(f\"KV Store: Inserted {key}\")\n                except Exception as kv_ex:\n                    helper.log_error(f\"KV Store operation failed: {kv_ex}\")\n                    continue\n\n            elif input_type == \"index\":\n                ew.write_event(\n                    helper.new_event(\n                        json.dumps(parsed_stix),\n                        time=None,\n                        host=None,\n                        index=target_index,\n                        source=\"opencti\",\n                        sourcetype=f\"opencti:{entity_type}\",\n                        done=True,\n                        unbroken=True,\n                    )\n                )\n            else:\n                helper.log_warning(f\"Unknown input_type: {input_type}\")\n                continue\n\n            state[\"start_from\"] = msg.id\n            helper.save_check_point(input_name, json.dumps(state))\n\n    except Exception as ex:\n        helper.log_error(f\"Error in stream processing loop: {ex}\")\n        sys.excepthook(*sys.exc_info())\n", "customized_options": [{"name": "stream_id", "value": "fc0e47a8-3275-416a-befd-7ccd9ae6c33e"}, {"name": "import_from", "value": "30"}, {"name": "input_type", "value": "Index"}], "uuid": "6be75d4feb574871a1b76156e2e8ec02", "sample_count": "470707"}]}, "field_extraction_builder": {"opencti:stream": {"is_parsed": true, "data_format": "json"}, "opencti:indicator": {"is_parsed": true, "data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {"log_level": "DEBUG"}, "customized_settings": [{"required": false, "name": "opencti_url", "label": "OpenCTI URL", "default_value": "", "placeholder": "", "help_string": "Enter the full URL of your OpenCTI platform (e.g., https://opencti.yourdomain.com). This is used to connect and pull threat intelligence data.", "type": "text", "format_type": "text", "value": "https://testing.octi.staging.filigran.io"}, {"required": false, "name": "opencti_api_key", "label": "OpenCTI API Key", "placeholder": "", "default_value": "", "help_string": "Enter your OpenCTI API token. This is used to authenticate and access the OpenCTI platform.", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"opencti:stream": {"metadata": {"event_count": 0, "data_input_name": "opencti_stream", "extractions_count": 0, "cims_count": 0}}, "opencti:indicator": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1750188500_19", "progress": 0.7857142857142857}}